export const OBJECTS2 = (
  provide: unknown[],
  runtime_0: unknown[],
  str: (x: string) => unknown,
) => [
  provide[0],
  provide[1],
  provide[2],
  provide[3],
  provide[4],
  provide[5],
  provide[6],
  provide[7],
  provide[8],
  provide[9],
  provide[10],
  runtime_0[0],
  provide[12],
  provide[13],
  provide[14],
  provide[15],
  provide[16],
  provide[17],
  runtime_0[1],
  runtime_0[2],
  runtime_0[3],
  runtime_0[4],
  runtime_0[5],
  runtime_0[6],
  runtime_0[7],
  runtime_0[8],
  runtime_0[9],
  runtime_0[10],
  runtime_0[11],
  runtime_0[12],
  runtime_0[13],
  provide[18],
  provide[19],
  runtime_0[14],
  runtime_0[15],
  runtime_0[16],
  runtime_0[17],
  provide[20],
  provide[21],
  provide[22],
  runtime_0[18],
  runtime_0[19],
  runtime_0[20],
  runtime_0[21],
  runtime_0[22],
  runtime_0[23],
  0,
  1,
  4,
  2,
  Infinity,
  -Infinity,
  -1,
  3,
  8,
  5,
  '∾',
  '⌜',
  '˙',
  '\0',
  '+',
  '-',
  '×',
  '÷',
  '⋆',
  '¬',
  '⌊',
  '⌈',
  '∨',
  '∧',
  '≠',
  '=',
  '>',
  '≥',
  '◶',
  '√',
  '<',
  '⊢',
  '⊣',
  '≍',
  '⋈',
  '↑',
  '↓',
  '↕',
  '⌽',
  '⍉',
  '/',
  '⊔',
  '⁼',
  '˜',
  '¨',
  '˘',
  '`',
  '∘',
  '○',
  '⌾',
  '⍟',
  '⊘',
  '⊸',
  '⟜',
  str('+-×÷⋆√⌊⌈|¬∧∨<>≠=≤≥≡≢⊣⊢⥊∾≍⋈↑↓↕«»⌽⍉/⍋⍒⊏⊑⊐⊒∊⍷⊔!˙˜˘¨⌜⁼´˝`∘○⊸⟜⌾⊘◶⎉⚇⍟⎊%'),
  str('´: Identity not found'),
  str('´: 𝕩 must be a list'),
  str("Mapping: Equal-rank argument shapes don't agree"),
  str("Mapping: Argument shape prefixes don't agree"),
  str('⍋𝕩: 𝕩 must have rank at least 1'),
  str('⍋ or ⍒: Rank of 𝕨 must be at least 1'),
  str('⍋ or ⍒: Rank of 𝕩 must be at least cell rank of 𝕨'),
  str('⍋ or ⍒: 𝕨 must be sorted'),
  str('p⊐𝕩 or 𝕨∊p: p must have rank at least 1'),
  str('p⊐n or n∊p: Rank of n must be at least cell rank of p'),
  str('∊𝕩 or ⊐𝕩: 𝕩 must have rank at least 1'),
  str('𝕨⍷𝕩: Rank of 𝕨 cannot exceed rank of 𝕩'),
  str('/𝕩: 𝕩 must have rank 1'),
  str('/𝕩: 𝕩 must consist of natural numbers'),
  str('𝕨⍉𝕩: 𝕨 must have rank at most 1'),
  str('𝕨⍉𝕩: Length of 𝕨 must not exceed rank of 𝕩'),
  str('𝕨⍉𝕩: 𝕨 must consist of valid axis indices'),
  str('𝕨⍉𝕩: Skipped result axis'),
  str('↑𝕩: 𝕩 must have rank at least 1'),
  str('↓𝕩: 𝕩 must have rank at least 1'),
  str('𝕨⊑𝕩: Indices in 𝕨 must consist of integers'),
  str('𝕨⊑𝕩: Index out of range'),
  str('𝕨⊏𝕩: Indices in 𝕨 must be integers'),
  str('𝕨⊏𝕩: Indices out of range'),
  str('𝕨⊑𝕩: 𝕩 must be a list when 𝕨 is a number'),
  str('𝕨⊑𝕩: Indices in compound 𝕨 must be lists'),
  str('𝕨⊑𝕩: Index length in 𝕨 must match rank of 𝕩'),
  str('𝕨'),
  str('𝕩: '),
  str('𝕩 must have rank at least 1 for simple 𝕨'),
  str('Compound 𝕨 must have rank at most 1'),
  str('Length of compound 𝕨 must be at most rank of 𝕩'),
  str('𝕨 must be an array of numbers or list of such arrays'),
  str('⊏𝕩: 𝕩 must have rank at least 1'),
  str('⊏𝕩: 𝕩 cannot have length 0'),
  str('⊏'),
  str("⊑𝕩: 𝕩 can't be empty"),
  str('⌽𝕩: 𝕩 must have rank at least 1'),
  str('𝕨⌽𝕩: 𝕨 must consist of integers'),
  str('𝕨⌽𝕩: 𝕨 too large'),
  str('⌽'),
  str('𝕨/𝕩: 𝕨 must consist of natural numbers'),
  str('𝕨/𝕩: Lengths of components of 𝕨 must match 𝕩'),
  str('𝕨/𝕩: Components of 𝕨 must have rank 0 or 1'),
  str('/'),
  str('=≠≡≢'),
  str('∾𝕩: 𝕩 must have an element with rank at least =𝕩'),
  str('Under ⚇: depths must be less than 0, or ∞'),
  str('⊢⊣˜∘○⊸⟜⊘◶'),
  str('´˝'),
  str('=≠≢'),
  str('<'),
  str('⋈'),
  str('≍'),
  str('↕/»«'),
  str('⊔'),
  str('⥊⌽⍉⊏'),
  str('↑↓'),
  str('⊑'),
  str('>'),
  str('∾'),
  str('¨⌜'),
  str('˘'),
  str('⎉'),
  str('⚇'),
  str('Cannot modify fill with Structural Under'),
  str('⌾: Incompatible result elements in structural Under'),
  str('>𝕩: Elements of 𝕩 must have matching shapes'),
  str('𝕨∾𝕩: Rank of 𝕨 and 𝕩 must differ by at most 1'),
  str('𝕨∾𝕩: Cell shapes of 𝕨 and 𝕩 must match'),
  str('∾𝕩: Incompatible element ranks'),
  str('∾𝕩: 𝕩 element shapes must be compatible'),
  str('∾𝕩: 𝕩 element trailing shapes must match'),
  str('∾𝕩: empty 𝕩 fill rank must be at least argument rank'),
  str('∾𝕩: 𝕩 must be an array'),
  str('↑'),
  str('↓'),
  str('𝕩: 𝕨 must '),
  str('have rank at most 1'),
  str('consist of integers'),
  str('« or »: 𝕩 must have rank at least 1'),
  str('« or »: 𝕨 must not have higher rank than 𝕩'),
  str('« or »: Rank of 𝕨 must be at least rank of 𝕩 minus 1'),
  str("« or »: 𝕨 must share 𝕩's major cell shape"),
  str('↕𝕩: 𝕩 must consist of natural numbers'),
  str('↕𝕩: 𝕩 must be a number or list'),
  str('𝕨↕𝕩: 𝕨 must have rank at most 1'),
  str('𝕨↕𝕩: Length of 𝕨 must be at most rank of 𝕩'),
  str('𝕨↕𝕩: 𝕨 must consist of natural numbers'),
  str('𝕨↕𝕩: Window length 𝕨 must be at most axis length plus one'),
  str("˘: Argument lengths don't agree"),
  str('˝: 𝕩 must have rank at least 1'),
  str('˝: Identity does not exist'),
  str('∘⌊⌽↑'),
  str('𝕨⥊𝕩: 𝕨 must have rank at most 1'),
  str('𝕨⥊𝕩: 𝕨 must consist of natural numbers'),
  str("𝕨⥊𝕩: Can't compute axis length when rest of shape is empty"),
  str('𝕨⥊𝕩: 𝕨 must consist of natural numbers or ∘ ⌊ ⌽ ↑'),
  str('𝕨⥊𝕩: Shape must be exact when reshaping with ∘'),
  str("𝕨⥊𝕩: Can't produce non-empty array from empty 𝕩"),
  str('⊔: Grouping argument must consist of integers'),
  str('⊔: Grouping argument values cannot be less than ¯1'),
  str('⊔𝕩: 𝕩 must be a list'),
  str('𝕨⊔𝕩: Rank of simple 𝕨 must be at most rank of 𝕩'),
  str(
    '𝕨⊔𝕩: Lengths of 𝕨 must equal to 𝕩, or one more only in a rank-1 component',
  ),
  str('𝕨⊔𝕩: Compound 𝕨 must be a list'),
  str('𝕨⊔𝕩: Total rank of 𝕨 must be at most rank of 𝕩'),
  str('𝕨⊔𝕩: 𝕩 must be an array'),
  str('⎉ or ⚇: 𝔾 result must have rank at most 1'),
  str('⎉ or ⚇: 𝔾 result must have 1 to 3 elements'),
  str('⎉ or ⚇: 𝔾 result must consist of integers'),
  str('⍟: 𝕨𝔾𝕩 must consist of integers'),
  str('≥: Needs two arguments'),
  str('≤: Needs two arguments'),
  str('⊒: Rank of 𝕨 must be at least 1'),
  str('⊒: Rank of 𝕩 must be at least cell rank of 𝕨'),
  str("Can't invert blocks (add an undo header?)"),
  str('Cannot invert modifier'),
  str('⁼: Inverse failed'),
  str('⁼: Inverse does not exist'),
  str('⁼: Inverse not found'),
];

export const OBJECTS3 = (runtime: unknown[], str: (x: string) => unknown) => [
  runtime[0],
  runtime[1],
  runtime[2],
  runtime[3],
  runtime[4],
  runtime[6],
  runtime[7],
  runtime[8],
  runtime[9],
  runtime[10],
  runtime[11],
  runtime[12],
  runtime[13],
  runtime[14],
  runtime[15],
  runtime[16],
  runtime[17],
  runtime[18],
  runtime[19],
  runtime[20],
  runtime[21],
  runtime[22],
  runtime[23],
  runtime[24],
  runtime[25],
  runtime[26],
  runtime[27],
  runtime[28],
  runtime[29],
  runtime[30],
  runtime[31],
  runtime[32],
  runtime[33],
  runtime[34],
  runtime[35],
  runtime[36],
  runtime[37],
  runtime[38],
  runtime[39],
  runtime[40],
  runtime[41],
  runtime[42],
  runtime[43],
  runtime[44],
  runtime[45],
  runtime[46],
  runtime[47],
  runtime[48],
  runtime[49],
  runtime[50],
  runtime[52],
  runtime[53],
  runtime[54],
  runtime[55],
  runtime[56],
  runtime[57],
  runtime[59],
  runtime[60],
  runtime[62],
  -1,
  26,
  23,
  24,
  7,
  10,
  13,
  11,
  9,
  0,
  1,
  2,
  5,
  8,
  4,
  3,
  -3,
  -2,
  6,
  17,
  Math.PI,
  Infinity,
  64,
  -4,
  -5,
  -6,
  32,
  48,
  43,
  44,
  42,
  66,
  16,
  14,
  '\0',
  '0',
  '#',
  "'",
  '"',
  '@',
  str('aA'),
  str('àÀ'),
  str('⋄,'),
  str(':;?'),
  str('⇐←↩'),
  str('(){}⟨⟩[]'),
  str('‿'),
  str('·'),
  str('𝕊𝕏𝕎𝔽𝔾𝕤𝕩𝕨𝕣𝕗𝕘'),
  str('.¯π∞'),
  str('_'),
  str('•'),
  str('𝕨'),
  str(' '),
  str('#\'"@'),
  str('s'),
  str('Unknown character'),
  str(': '),
  str('Character set conflict: '),
  str('˜⁼'),
  str('Unclosed quote'),
  str("Words can't only have underscores"),
  str('System dot with no name'),
  str("𝕣 can't be used with other word characters"),
  str("Numbers can't start with underscores"),
  str('Letter'),
  str(' "'),
  str('" not allowed in numbers'),
  str('ea'),
  str('Negative sign in the middle of a number'),
  str('Portion of a number is empty'),
  str('Ill-formed decimal or exponent use'),
  str('π and ∞ must occur alone'),
  str('Unmatched bracket'),
  str('Empty program'),
  str('Swapped open and closed brackets'),
  str("Parentheses can't contain separators"),
  str('Punctuation : ; ? outside block top level'),
  str('Empty statement or expression'),
  str('Invalid assignment or stranding use'),
  str("Can't use export statement as expression"),
  str("Can't use export statement as predicate"),
  str('Dot must be followed by a name'),
  str('Header-less bodies must come last'),
  str('At most two header-less bodies allowed'),
  str('Invalid Undo header syntax'),
  str('Only one header per body allowed'),
  str('Missing operand in header'),
  str('Invalid header structure'),
  str('Incorrect special name'),
  str('Header left argument without right'),
  str('Header operation must be a plain name'),
  str('Header with ⁼ must take arguments'),
  str('Header with ˜⁼ must have left argument'),
  str('Block header type conflict'),
  str('Special name outside of any block'),
  str('Unreachable body'),
  str('Dot must be preceded by a subject'),
  str('Nothing (·) cannot be assigned'),
  str("Can't use Nothing (·) as predicate"),
  str('Missing operand'),
  str('Double subjects (missing ‿?)'),
  str('No right-hand side in non-modified assignment'),
  str('Assignment role mismatch or missing modified assignment target'),
  str('Role of the two sides in assignment must match'),
  str("Can't use Nothing (·) in lists"),
  str("Can't modify Nothing (·)"),
  str("Square brackets can't be empty"),
  str("Can't return Nothing (·)"),
  str('Invalid use of 𝕨 in monadic case'),
  str('Assignment target must be a name or list of targets'),
  str("Can't nest assignments (write aliases with ⇐)"),
  str("Can't use result of function/modifier assignment without parentheses"),
  str('Alias must have a name on the right and appear within ⟨⟩'),
  str("Can't define special name"),
  str('Redefinition'),
  str('Undefined identifier'),
  str("Can't export from surrounding scope"),
  str('Second-level parts of a train must be functions'),
  str('System values not supported'),
];

export const OBJECTS = (runtime: unknown[], str: (x: string) => unknown) => [
  runtime[0],
  runtime[1],
  runtime[2],
  runtime[6],
  runtime[7],
  runtime[8],
  runtime[9],
  runtime[11],
  runtime[12],
  runtime[13],
  runtime[14],
  runtime[15],
  runtime[16],
  runtime[17],
  runtime[18],
  runtime[19],
  runtime[20],
  runtime[21],
  runtime[22],
  runtime[23],
  runtime[24],
  runtime[25],
  runtime[26],
  runtime[27],
  runtime[28],
  runtime[29],
  runtime[30],
  runtime[31],
  runtime[33],
  runtime[36],
  runtime[37],
  runtime[43],
  runtime[44],
  runtime[45],
  runtime[46],
  runtime[47],
  runtime[48],
  runtime[50],
  runtime[51],
  runtime[52],
  runtime[53],
  runtime[54],
  runtime[55],
  runtime[56],
  runtime[57],
  runtime[58],
  runtime[59],
  runtime[60],
  runtime[62],
  0,
  -1,
  Infinity,
  1,
  2,
  5,
  4,
  127,
  32,
  3,
  7,
  10,
  '\0',
  ' ',
  '┐',
  '↕',
  '…',
  '␡',
  '␀',
  '·',
  '0',
  '"',
  str('@'),
  str("'"),
  str('⟨⟩'),
  str('⟨'),
  str('⟩'),
  str('┌'),
  str('·─'),
  str('·╵╎┆┊'),
  str('┘'),
  str('┌┐'),
  str('└┘'),
  str('‿'),
  str('\'"'),
  str('00321111'),
  str('('),
  str(')'),
  str('{𝔽}'),
  str('*array*'),
  str('•Fmt: 𝕨 must be a list of up to two numbers (width, height)'),
  str(','),
  str('<'),
  str('⥊'),
  str("Can't represent block"),
];
